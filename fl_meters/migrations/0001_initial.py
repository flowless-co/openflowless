# Generated by Django 2.2.1 on 2020-07-07 00:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_google_maps.fields
import fl_meters.tools


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(default=fl_meters.tools.next_alert_key, max_length=16, unique=True)),
                ('loss_amount', models.DecimalField(decimal_places=3, max_digits=10)),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('kind', models.CharField(choices=[('LK', 'Leak'), ('SK', 'Shock'), ('--', 'Undefined')], default='--', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='ChlorineSensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=11, null=True, unique=True)),
                ('installation_date', models.DateTimeField(null=True)),
                ('reading_factor', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='The division factor for each pulse going through this sensor.', max_digits=9)),
                ('reading_offset', models.DecimalField(blank=True, decimal_places=5, default=0, help_text='The offset amount for each pulse going through this sensor. Can also be a negative value.', max_digits=12)),
                ('active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Chlorine Sensor',
                'verbose_name_plural': 'Chlorine Sensors',
            },
        ),
        migrations.CreateModel(
            name='DeviceModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=48)),
                ('model_number', models.CharField(max_length=24)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', django_google_maps.fields.AddressField(max_length=200, null=True)),
                ('geolocation', django_google_maps.fields.GeoLocationField(max_length=100, null=True)),
                ('description', models.TextField()),
                ('city', models.CharField(blank=True, default='', max_length=32)),
                ('neighbourhood', models.CharField(blank=True, default='', max_length=48)),
                ('bldg_no', models.CharField(blank=True, default='', max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('installation_date', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('op_status', models.IntegerField(choices=[(2, 'Stopped'), (3, 'Running'), (4, 'Faulty'), (9, 'N/A')], default=9)),
                ('leak_status', models.IntegerField(choices=[(2, 'Not Leaking'), (3, 'Leaking'), (9, 'N/A')], default=9)),
                ('reading_factor', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='The multiplication factor for each pulse going through this meter.', max_digits=9)),
                ('reading_offset', models.DecimalField(blank=True, decimal_places=5, default=0, help_text='The offset amount for each pulse going through this meter. Can also be a negative value.', max_digits=12)),
                ('serial_number', models.CharField(blank=True, default='', max_length=32)),
                ('active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Meter',
                'verbose_name_plural': 'Meters',
            },
        ),
        migrations.CreateModel(
            name='MeterModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=48)),
                ('model_number', models.CharField(max_length=24)),
                ('bulk_meter', models.BooleanField(default=True)),
                ('digits', models.IntegerField(help_text='Number of digits on meter. Decimal digits should not be included.')),
                ('type', models.IntegerField(choices=[(2, 'Electromagnetic'), (3, 'Ultrasonic'), (4, 'Positive Displacement'), (5, 'Multi-jet'), (9, 'N/A')], default=2)),
            ],
        ),
        migrations.CreateModel(
            name='PressureTransmitter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('installation_date', models.DateTimeField(null=True)),
                ('op_status', models.IntegerField(choices=[(2, 'Stopped'), (3, 'Running'), (4, 'Faulty'), (9, 'N/A')], default=9)),
                ('reading_factor', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='The division factor for each pulse going through this transmitter.', max_digits=9)),
                ('reading_offset', models.DecimalField(blank=True, decimal_places=5, default=0, help_text='The offset amount for each pulse going through this transmitter. Can also be a negative value.', max_digits=12)),
                ('serial_number', models.CharField(blank=True, default='', max_length=32)),
                ('active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fl_meters.Location')),
            ],
            options={
                'verbose_name': 'Transmitter',
                'verbose_name_plural': 'Transmitters',
            },
        ),
        migrations.CreateModel(
            name='Serial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=16)),
                ('last_serial_value', models.IntegerField(default=0)),
                ('last_serial_stamp', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TankLevelTransmitter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=9, unique=True)),
                ('reading', models.DecimalField(decimal_places=5, max_digits=13)),
                ('reading_factor', models.DecimalField(blank=True, decimal_places=4, default=1, max_digits=9)),
                ('reading_offset', models.DecimalField(blank=True, decimal_places=5, default=0, max_digits=13)),
            ],
        ),
        migrations.CreateModel(
            name='TransmissionLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=9, unique=True)),
                ('volume', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=12)),
                ('end_location', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='fl_meters.Location')),
                ('start_location', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='fl_meters.Location')),
            ],
        ),
        migrations.CreateModel(
            name='TransmitterModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=48)),
                ('model_number', models.CharField(max_length=24)),
                ('type', models.IntegerField(choices=[(2, 'ANDARY 1'), (3, 'ANDARY 2'), (9, 'N/A')], default=9)),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=48)),
                ('color', models.CharField(blank=True, default='#ff0000', max_length=9)),
                ('n1', models.DecimalField(decimal_places=3, default=1, max_digits=6)),
                ('estimated_legitimate_night_use', models.DecimalField(decimal_places=3, default=0, max_digits=6)),
                ('burst_threshold', models.DecimalField(decimal_places=3, default=0, max_digits=6)),
            ],
        ),
        migrations.CreateModel(
            name='ZoneHasPressureTransmitter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('azp_factor', models.DecimalField(blank=True, decimal_places=6, default=1, max_digits=12)),
                ('use_for_azp', models.BooleanField(blank=True, default=True)),
                ('transmitter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='associations', to='fl_meters.PressureTransmitter')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transmitter_associations', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='ZoneCoordinate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=8)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coords', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='YearlyZoneLoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('loss', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('zone', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='yearly_losses', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='YearlyZoneConsumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('consumption', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('p_quarter1', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_quarter2', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_quarter3', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_quarter4', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('zone_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='yearly_consumption_set', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='YearlyTSMLossRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('loss', models.DecimalField(decimal_places=3, max_digits=11, null=True)),
                ('transmission_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yearly_losses', to='fl_meters.TransmissionLine')),
            ],
        ),
        migrations.CreateModel(
            name='YearlyTSMInflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('consumption', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('transmission_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yearly_consumption_set', to='fl_meters.TransmissionLine')),
            ],
        ),
        migrations.CreateModel(
            name='YearlyAvgZonePressure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField()),
                ('azp', models.DecimalField(decimal_places=5, max_digits=10)),
                ('weight', models.IntegerField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='YearlyAvgChlorineLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField()),
                ('level', models.DecimalField(decimal_places=3, max_digits=13)),
                ('weight', models.IntegerField()),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.ChlorineSensor')),
            ],
        ),
        migrations.CreateModel(
            name='QuarterHourlyZoneConsumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('consumption', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('zone_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='qh_consumption_set', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='QuarterHourlyTSMInflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('consumption', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('transmission_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qh_consumption_set', to='fl_meters.TransmissionLine')),
            ],
        ),
        migrations.CreateModel(
            name='Pulse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('reading', models.CharField(default='', max_length=16)),
                ('normalized_reading', models.DecimalField(blank=True, decimal_places=3, max_digits=13, null=True)),
                ('meter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.Meter')),
            ],
        ),
        migrations.AddField(
            model_name='pressuretransmitter',
            name='meter_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.TransmitterModel'),
        ),
        migrations.AddField(
            model_name='pressuretransmitter',
            name='zones',
            field=models.ManyToManyField(through='fl_meters.ZoneHasPressureTransmitter', to='fl_meters.Zone'),
        ),
        migrations.CreateModel(
            name='PressurePulse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('reading', models.CharField(default='', max_length=17)),
                ('normalized_reading', models.DecimalField(blank=True, decimal_places=3, max_digits=13, null=True)),
                ('transmitter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.PressureTransmitter')),
            ],
        ),
        migrations.CreateModel(
            name='OnHold',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('ready_on', models.IntegerField()),
                ('current_pulses_arrived', models.IntegerField()),
                ('past_pulses_arrived', models.IntegerField()),
                ('transmission_line', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fl_meters.TransmissionLine')),
                ('zone', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrived_on', models.DateTimeField(auto_now_add=True)),
                ('alert', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fl_meters.Alert')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyZoneLoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('loss', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('zone', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='monthly_losses', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyZoneConsumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('consumption', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('billed_consumption', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('p_week1', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_week2', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_week3', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_week4', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('zone_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='monthly_consumption_set', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyTSMLossRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('loss', models.DecimalField(decimal_places=3, max_digits=11, null=True)),
                ('transmission_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_losses', to='fl_meters.TransmissionLine')),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyTSMInflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('consumption', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('billed_consumption', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('transmission_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_consumption_set', to='fl_meters.TransmissionLine')),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyAvgZonePressure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('azp', models.DecimalField(decimal_places=5, max_digits=10)),
                ('weight', models.IntegerField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyAvgConsumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month_of_year', models.PositiveSmallIntegerField()),
                ('amount', models.DecimalField(decimal_places=3, max_digits=10, null=True)),
                ('weight', models.PositiveSmallIntegerField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_averages', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyAvgChlorineLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('level', models.DecimalField(decimal_places=3, max_digits=13)),
                ('weight', models.IntegerField()),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.ChlorineSensor')),
            ],
        ),
        migrations.CreateModel(
            name='MeterToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auth_token', to='fl_meters.Meter', verbose_name='Meter')),
            ],
            options={
                'verbose_name': 'Token',
                'verbose_name_plural': 'Tokens',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='meter',
            name='input_for',
            field=models.ForeignKey(blank=True, help_text='Input of Zone', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='input_meters', to='fl_meters.Zone'),
        ),
        migrations.AddField(
            model_name='meter',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fl_meters.Location'),
        ),
        migrations.AddField(
            model_name='meter',
            name='meter_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.MeterModel'),
        ),
        migrations.AddField(
            model_name='meter',
            name='output_for',
            field=models.ForeignKey(blank=True, help_text='Output of Zone', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='output_meters', to='fl_meters.Zone'),
        ),
        migrations.AddField(
            model_name='meter',
            name='tsm_input',
            field=models.OneToOneField(blank=True, help_text='Input of Transmission Line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='input_meter', to='fl_meters.TransmissionLine'),
        ),
        migrations.AddField(
            model_name='meter',
            name='tsm_output',
            field=models.OneToOneField(blank=True, help_text='Output of Transmission Line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='output_meter', to='fl_meters.TransmissionLine'),
        ),
        migrations.CreateModel(
            name='LossRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=3, max_digits=13)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loss_records', to='fl_meters.Zone')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='zone',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fl_meters.Zone'),
        ),
        migrations.CreateModel(
            name='HourlyAvgZonePressure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('azp', models.DecimalField(decimal_places=5, max_digits=10)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='HourlyAvgConsumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hour_of_day', models.PositiveSmallIntegerField()),
                ('amount', models.DecimalField(decimal_places=3, max_digits=10, null=True)),
                ('weight', models.PositiveSmallIntegerField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hourly_averages', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='HourlyAvgChlorineLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('level', models.DecimalField(decimal_places=3, max_digits=13)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.ChlorineSensor')),
            ],
        ),
        migrations.CreateModel(
            name='DailyZoneLoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('loss', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('zone', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='daily_losses', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='DailyZoneConsumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('consumption', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('p_dawn', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_noon', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_afternoon', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_evening', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('p_nighttime', models.DecimalField(blank=True, decimal_places=6, default=0, max_digits=13)),
                ('zone_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='daily_consumption_set', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='DailyTSMLossRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('loss', models.DecimalField(decimal_places=3, max_digits=11, null=True)),
                ('transmission_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_losses', to='fl_meters.TransmissionLine')),
            ],
        ),
        migrations.CreateModel(
            name='DailyTSMInflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('consumption', models.DecimalField(decimal_places=6, max_digits=13, null=True)),
                ('transmission_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_consumption_set', to='fl_meters.TransmissionLine')),
            ],
        ),
        migrations.CreateModel(
            name='DailyAvgZonePressure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('azp', models.DecimalField(decimal_places=5, max_digits=10)),
                ('weight', models.IntegerField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='DailyAvgConsumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.PositiveSmallIntegerField()),
                ('amount', models.DecimalField(decimal_places=3, max_digits=10, null=True)),
                ('weight', models.PositiveSmallIntegerField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_averages', to='fl_meters.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='DailyAvgChlorineLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('level', models.DecimalField(decimal_places=3, max_digits=13)),
                ('weight', models.IntegerField()),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.ChlorineSensor')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=48)),
                ('customer_type', models.IntegerField(choices=[(2, 'Residential'), (3, 'Commercial'), (4, 'Industrial'), (5, 'Tourism'), (6, 'Irrigation')])),
                ('phone_number', models.CharField(blank=True, default='', max_length=14)),
                ('email', models.CharField(blank=True, default='', max_length=32)),
                ('meter', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='customer', to='fl_meters.Meter')),
            ],
        ),
        migrations.CreateModel(
            name='ChlorineSensorPulse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('reading', models.DecimalField(decimal_places=3, max_digits=16)),
                ('normalized_reading', models.DecimalField(blank=True, decimal_places=3, max_digits=16, null=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.ChlorineSensor')),
            ],
        ),
        migrations.AddField(
            model_name='chlorinesensor',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fl_meters.Location'),
        ),
        migrations.AddField(
            model_name='chlorinesensor',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fl_meters.DeviceModel'),
        ),
        migrations.CreateModel(
            name='AnalyticsQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('table_type', models.CharField(choices=[('qh', 'QuarterHourly'), ('day', 'daily'), ('month', 'monthly'), ('year', 'yearly')], max_length=5)),
                ('ready_on', models.IntegerField(default=1)),
                ('arrived', models.IntegerField(default=0)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fl_meters.Zone')),
            ],
        ),
        migrations.AddField(
            model_name='alert',
            name='zone',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='fl_meters.Zone'),
        ),
    ]
